{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6cc6f99d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: selenium in c:\\users\\abhishek\\anaconda3\\lib\\site-packages (3.141.0)\n",
      "Requirement already satisfied: urllib3 in c:\\users\\abhishek\\anaconda3\\lib\\site-packages (from selenium) (1.26.4)\n"
     ]
    }
   ],
   "source": [
    "!pip install selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6056281",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "\n",
    "import seaborn as sns  \n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline \n",
    "\n",
    "import time \n",
    "\n",
    "from sklearn.linear_model import LogisticRegression \n",
    "\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.metrics import classification_report \n",
    "from sklearn.metrics import confusion_matrix \n",
    "from nltk.tokenize import RegexpTokenizer  \n",
    "from nltk.stem.snowball import SnowballStemmer \n",
    "from sklearn.feature_extraction.text import CountVectorizer  \n",
    "from sklearn.pipeline import make_pipeline \n",
    "\n",
    "from PIL import Image\n",
    "\n",
    "\n",
    "from bs4 import BeautifulSoup \n",
    "from selenium import webdriver  \n",
    "import networkx as nx \n",
    "\n",
    "import pickle \n",
    "\n",
    "import warnings "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fdecfe19",
   "metadata": {},
   "outputs": [],
   "source": [
    "malicious_data = pd.read_csv('malicious_site_urls.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8939c690",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a0e1554f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f03f49fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 549346 entries, 0 to 549345\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count   Dtype \n",
      "---  ------  --------------   ----- \n",
      " 0   URL     549346 non-null  object\n",
      " 1   Label   549346 non-null  object\n",
      "dtypes: object(2)\n",
      "memory usage: 8.4+ MB\n"
     ]
    }
   ],
   "source": [
    "malicious_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "334ccb24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.isnull().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ee23c12c",
   "metadata": {},
   "outputs": [],
   "source": [
    "label_counts = pd.DataFrame(malicious_data.Label.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7e791214",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Abhishek\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Label'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualizing target_col\n",
    "sns.set_style('darkgrid')\n",
    "sns.barplot(label_counts.index,label_counts.Label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "68042baa",
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = RegexpTokenizer(r'[A-Za-z]+')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bdb9f0d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.URL[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54e03b7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['nobell',\n",
       " 'it',\n",
       " 'ffb',\n",
       " 'd',\n",
       " 'dca',\n",
       " 'cce',\n",
       " 'f',\n",
       " 'login',\n",
       " 'SkyPe',\n",
       " 'com',\n",
       " 'en',\n",
       " 'cgi',\n",
       " 'bin',\n",
       " 'verification',\n",
       " 'login',\n",
       " 'ffb',\n",
       " 'd',\n",
       " 'dca',\n",
       " 'cce',\n",
       " 'f',\n",
       " 'index',\n",
       " 'php',\n",
       " 'cmd',\n",
       " 'profile',\n",
       " 'ach',\n",
       " 'outdated',\n",
       " 'page',\n",
       " 'tmpl',\n",
       " 'p',\n",
       " 'gen',\n",
       " 'failed',\n",
       " 'to',\n",
       " 'load',\n",
       " 'nav',\n",
       " 'login',\n",
       " 'access']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this will be pull letter which matches to expression\n",
    "tokenizer.tokenize(malicious_data.URL[0]) # using first row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0d2e9574",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting words tokenized ...\n",
      "Time taken 2.575580199999999 sec\n"
     ]
    }
   ],
   "source": [
    "print('Getting words tokenized ...')\n",
    "t0= time.perf_counter()\n",
    "malicious_data['text_tokenized'] = malicious_data.URL.map(lambda t: tokenizer.tokenize(t)) \n",
    "t1 = time.perf_counter() - t0\n",
    "print('Time taken',t1 ,'sec')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6600a132",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>text_tokenized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>466761</th>\n",
       "      <td>worthpoint.com/worthopedia/vintage-jewelry-mex...</td>\n",
       "      <td>good</td>\n",
       "      <td>[worthpoint, com, worthopedia, vintage, jewelr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315801</th>\n",
       "      <td>docstoc.com/docs/23890763/Shriners-Supporters</td>\n",
       "      <td>good</td>\n",
       "      <td>[docstoc, com, docs, Shriners, Supporters]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451932</th>\n",
       "      <td>trueknowledge.com/q/facts_about__san_francisco</td>\n",
       "      <td>good</td>\n",
       "      <td>[trueknowledge, com, q, facts, about, san, fra...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451267</th>\n",
       "      <td>tripadvisor.com/Attraction_Review-g32810-d1568...</td>\n",
       "      <td>good</td>\n",
       "      <td>[tripadvisor, com, Attraction, Review, g, d, R...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480469</th>\n",
       "      <td>zoominfo.com/people/Tremblay_Genevieve_7307252...</td>\n",
       "      <td>good</td>\n",
       "      <td>[zoominfo, com, people, Tremblay, Genevieve, a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "466761  worthpoint.com/worthopedia/vintage-jewelry-mex...  good   \n",
       "315801      docstoc.com/docs/23890763/Shriners-Supporters  good   \n",
       "451932     trueknowledge.com/q/facts_about__san_francisco  good   \n",
       "451267  tripadvisor.com/Attraction_Review-g32810-d1568...  good   \n",
       "480469  zoominfo.com/people/Tremblay_Genevieve_7307252...  good   \n",
       "\n",
       "                                           text_tokenized  \n",
       "466761  [worthpoint, com, worthopedia, vintage, jewelr...  \n",
       "315801         [docstoc, com, docs, Shriners, Supporters]  \n",
       "451932  [trueknowledge, com, q, facts, about, san, fra...  \n",
       "451267  [tripadvisor, com, Attraction, Review, g, d, R...  \n",
       "480469  [zoominfo, com, people, Tremblay, Genevieve, a...  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c308d011",
   "metadata": {},
   "outputs": [],
   "source": [
    "stemmer = SnowballStemmer(\"english\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "340aec9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting words stemmed ...\n",
      "Time taken 47.8156705 sec\n"
     ]
    }
   ],
   "source": [
    "print('Getting words stemmed ...')\n",
    "t0= time.perf_counter()\n",
    "malicious_data['text_stemmed'] = malicious_data['text_tokenized'].map(lambda l: [stemmer.stem(word) for word in l])\n",
    "t1= time.perf_counter() - t0\n",
    "print('Time taken',t1 ,'sec')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a8ea757c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>text_tokenized</th>\n",
       "      <th>text_stemmed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>359460</th>\n",
       "      <td>imdb.com/name/nm1279783/</td>\n",
       "      <td>good</td>\n",
       "      <td>[imdb, com, name, nm]</td>\n",
       "      <td>[imdb, com, name, nm]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>420992</th>\n",
       "      <td>redbrokerage.com/about/retail-brokers/details....</td>\n",
       "      <td>good</td>\n",
       "      <td>[redbrokerage, com, about, retail, brokers, de...</td>\n",
       "      <td>[redbrokerag, com, about, retail, broker, deta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>226675</th>\n",
       "      <td>people.famouswhy.com/mary_pierce/</td>\n",
       "      <td>good</td>\n",
       "      <td>[people, famouswhy, com, mary, pierce]</td>\n",
       "      <td>[peopl, famouswhi, com, mari, pierc]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363858</th>\n",
       "      <td>isthisyour.name/directory/fullnames/ma~shiffle...</td>\n",
       "      <td>good</td>\n",
       "      <td>[isthisyour, name, directory, fullnames, ma, s...</td>\n",
       "      <td>[isthisyour, name, directori, fullnam, ma, shi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496799</th>\n",
       "      <td>vkt-rus.com/ylnsp9</td>\n",
       "      <td>bad</td>\n",
       "      <td>[vkt, rus, com, ylnsp]</td>\n",
       "      <td>[vkt, rus, com, ylnsp]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "359460                           imdb.com/name/nm1279783/  good   \n",
       "420992  redbrokerage.com/about/retail-brokers/details....  good   \n",
       "226675                  people.famouswhy.com/mary_pierce/  good   \n",
       "363858  isthisyour.name/directory/fullnames/ma~shiffle...  good   \n",
       "496799                                 vkt-rus.com/ylnsp9   bad   \n",
       "\n",
       "                                           text_tokenized  \\\n",
       "359460                              [imdb, com, name, nm]   \n",
       "420992  [redbrokerage, com, about, retail, brokers, de...   \n",
       "226675             [people, famouswhy, com, mary, pierce]   \n",
       "363858  [isthisyour, name, directory, fullnames, ma, s...   \n",
       "496799                             [vkt, rus, com, ylnsp]   \n",
       "\n",
       "                                             text_stemmed  \n",
       "359460                              [imdb, com, name, nm]  \n",
       "420992  [redbrokerag, com, about, retail, broker, deta...  \n",
       "226675               [peopl, famouswhi, com, mari, pierc]  \n",
       "363858  [isthisyour, name, directori, fullnam, ma, shi...  \n",
       "496799                             [vkt, rus, com, ylnsp]  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d0e23ed6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting joiningwords ...\n",
      "Time taken 0.405383300000004 sec\n"
     ]
    }
   ],
   "source": [
    "print('Getting joiningwords ...')\n",
    "t0= time.perf_counter()\n",
    "malicious_data['text_sent'] = malicious_data['text_stemmed'].map(lambda l: ' '.join(l))\n",
    "t1= time.perf_counter() - t0\n",
    "print('Time taken',t1 ,'sec')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8aff4e1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>text_tokenized</th>\n",
       "      <th>text_stemmed</th>\n",
       "      <th>text_sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>379074</th>\n",
       "      <td>logfm.com/</td>\n",
       "      <td>good</td>\n",
       "      <td>[logfm, com]</td>\n",
       "      <td>[logfm, com]</td>\n",
       "      <td>logfm com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167062</th>\n",
       "      <td>duckduckgo.com/1/c/Dundee_F.C._players</td>\n",
       "      <td>good</td>\n",
       "      <td>[duckduckgo, com, c, Dundee, F, C, players]</td>\n",
       "      <td>[duckduckgo, com, c, dunde, f, c, player]</td>\n",
       "      <td>duckduckgo com c dunde f c player</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157221</th>\n",
       "      <td>cemetery.canadagenweb.org/AB/ABA0003/</td>\n",
       "      <td>good</td>\n",
       "      <td>[cemetery, canadagenweb, org, AB, ABA]</td>\n",
       "      <td>[cemeteri, canadagenweb, org, ab, aba]</td>\n",
       "      <td>cemeteri canadagenweb org ab aba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537906</th>\n",
       "      <td>mail.worldmilitarynews.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>[mail, worldmilitarynews, org]</td>\n",
       "      <td>[mail, worldmilitarynew, org]</td>\n",
       "      <td>mail worldmilitarynew org</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>355877</th>\n",
       "      <td>hullnumber.com/crew1.php?cm=CV-64</td>\n",
       "      <td>good</td>\n",
       "      <td>[hullnumber, com, crew, php, cm, CV]</td>\n",
       "      <td>[hullnumb, com, crew, php, cm, cv]</td>\n",
       "      <td>hullnumb com crew php cm cv</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           URL Label  \\\n",
       "379074                              logfm.com/  good   \n",
       "167062  duckduckgo.com/1/c/Dundee_F.C._players  good   \n",
       "157221   cemetery.canadagenweb.org/AB/ABA0003/  good   \n",
       "537906             mail.worldmilitarynews.org/   bad   \n",
       "355877       hullnumber.com/crew1.php?cm=CV-64  good   \n",
       "\n",
       "                                     text_tokenized  \\\n",
       "379074                                 [logfm, com]   \n",
       "167062  [duckduckgo, com, c, Dundee, F, C, players]   \n",
       "157221       [cemetery, canadagenweb, org, AB, ABA]   \n",
       "537906               [mail, worldmilitarynews, org]   \n",
       "355877         [hullnumber, com, crew, php, cm, CV]   \n",
       "\n",
       "                                     text_stemmed  \\\n",
       "379074                               [logfm, com]   \n",
       "167062  [duckduckgo, com, c, dunde, f, c, player]   \n",
       "157221     [cemeteri, canadagenweb, org, ab, aba]   \n",
       "537906              [mail, worldmilitarynew, org]   \n",
       "355877         [hullnumb, com, crew, php, cm, cv]   \n",
       "\n",
       "                                text_sent  \n",
       "379074                          logfm com  \n",
       "167062  duckduckgo com c dunde f c player  \n",
       "157221   cemeteri canadagenweb org ab aba  \n",
       "537906          mail worldmilitarynew org  \n",
       "355877        hullnumb com crew php cm cv  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "malicious_data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3de082c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sliceing classes\n",
    "bad_sites = malicious_data[malicious_data.Label == 'bad']\n",
    "good_sites = malicious_data[malicious_data.Label == 'good']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e373aa49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>text_tokenized</th>\n",
       "      <th>text_stemmed</th>\n",
       "      <th>text_sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>[nobell, it, ffb, d, dca, cce, f, login, SkyPe...</td>\n",
       "      <td>[nobel, it, ffb, d, dca, cce, f, login, skype,...</td>\n",
       "      <td>nobel it ffb d dca cce f login skype com en cg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>[www, dghjdgf, com, paypal, co, uk, cycgi, bin...</td>\n",
       "      <td>[www, dghjdgf, com, paypal, co, uk, cycgi, bin...</td>\n",
       "      <td>www dghjdgf com paypal co uk cycgi bin webscrc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>[serviciosbys, com, paypal, cgi, bin, get, int...</td>\n",
       "      <td>[serviciosbi, com, paypal, cgi, bin, get, into...</td>\n",
       "      <td>serviciosbi com paypal cgi bin get into herf s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>[mail, printakid, com, www, online, americanex...</td>\n",
       "      <td>[mail, printakid, com, www, onlin, americanexp...</td>\n",
       "      <td>mail printakid com www onlin americanexpress c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>[thewhiskeydregs, com, wp, content, themes, wi...</td>\n",
       "      <td>[thewhiskeydreg, com, wp, content, theme, wide...</td>\n",
       "      <td>thewhiskeydreg com wp content theme widescreen...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label  \\\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad   \n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3  mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "\n",
       "                                      text_tokenized  \\\n",
       "0  [nobell, it, ffb, d, dca, cce, f, login, SkyPe...   \n",
       "1  [www, dghjdgf, com, paypal, co, uk, cycgi, bin...   \n",
       "2  [serviciosbys, com, paypal, cgi, bin, get, int...   \n",
       "3  [mail, printakid, com, www, online, americanex...   \n",
       "4  [thewhiskeydregs, com, wp, content, themes, wi...   \n",
       "\n",
       "                                        text_stemmed  \\\n",
       "0  [nobel, it, ffb, d, dca, cce, f, login, skype,...   \n",
       "1  [www, dghjdgf, com, paypal, co, uk, cycgi, bin...   \n",
       "2  [serviciosbi, com, paypal, cgi, bin, get, into...   \n",
       "3  [mail, printakid, com, www, onlin, americanexp...   \n",
       "4  [thewhiskeydreg, com, wp, content, theme, wide...   \n",
       "\n",
       "                                           text_sent  \n",
       "0  nobel it ffb d dca cce f login skype com en cg...  \n",
       "1  www dghjdgf com paypal co uk cycgi bin webscrc...  \n",
       "2  serviciosbi com paypal cgi bin get into herf s...  \n",
       "3  mail printakid com www onlin americanexpress c...  \n",
       "4  thewhiskeydreg com wp content theme widescreen...  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bad_sites.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c39dea7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>text_tokenized</th>\n",
       "      <th>text_stemmed</th>\n",
       "      <th>text_sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18231</th>\n",
       "      <td>esxcc.com/js/index.htm?us.battle.net/noghn/en/...</td>\n",
       "      <td>good</td>\n",
       "      <td>[esxcc, com, js, index, htm, us, battle, net, ...</td>\n",
       "      <td>[esxcc, com, js, index, htm, us, battl, net, n...</td>\n",
       "      <td>esxcc com js index htm us battl net noghn en r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18232</th>\n",
       "      <td>www\u000eeira¯&amp;nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\u0003Ë\\nÓ\u00176...</td>\n",
       "      <td>good</td>\n",
       "      <td>[www, eira, nvinip, ncH, wV, yDaH, yE, u, rT, ...</td>\n",
       "      <td>[www, eira, nvinip, nch, wv, ydah, ye, u, rt, ...</td>\n",
       "      <td>www eira nvinip nch wv ydah ye u rt u g m i xz...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18233</th>\n",
       "      <td>'www.institutocgr.coo/web/media/syqvem/dk-\u000fóij...</td>\n",
       "      <td>good</td>\n",
       "      <td>[www, institutocgr, coo, web, media, syqvem, d...</td>\n",
       "      <td>[www, institutocgr, coo, web, media, syqvem, d...</td>\n",
       "      <td>www institutocgr coo web media syqvem dk ij r ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18234</th>\n",
       "      <td>\u0011\u0018Yìê\f",
       "koãÕ»Î§DéÎ\u0002l½ñ¡ââqtò¸/à; Í</td>\n",
       "      <td>good</td>\n",
       "      <td>[Y, ko, D, l, qt]</td>\n",
       "      <td>[y, ko, d, l, qt]</td>\n",
       "      <td>y ko d l qt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18236</th>\n",
       "      <td>ruta89fm.com/images/AS@Vies/1i75cf7b16vc&lt;F\u0015d16...</td>\n",
       "      <td>good</td>\n",
       "      <td>[ruta, fm, com, images, AS, Vies, i, cf, b, vc...</td>\n",
       "      <td>[ruta, fm, com, imag, as, vie, i, cf, b, vc, f...</td>\n",
       "      <td>ruta fm com imag as vie i cf b vc f d b g sd v...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     URL Label  \\\n",
       "18231  esxcc.com/js/index.htm?us.battle.net/noghn/en/...  good   \n",
       "18232  www\u000eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\u0003Ë\\nÓ\u00176...  good   \n",
       "18233  'www.institutocgr.coo/web/media/syqvem/dk-\u000fóij...  good   \n",
       "18234                  \u0011\u0018Yìê\n",
       "koãÕ»Î§DéÎ\u0002l½ñ¡ââqtò¸/à; Í  good   \n",
       "18236  ruta89fm.com/images/AS@Vies/1i75cf7b16vc<F\u0015d16...  good   \n",
       "\n",
       "                                          text_tokenized  \\\n",
       "18231  [esxcc, com, js, index, htm, us, battle, net, ...   \n",
       "18232  [www, eira, nvinip, ncH, wV, yDaH, yE, u, rT, ...   \n",
       "18233  [www, institutocgr, coo, web, media, syqvem, d...   \n",
       "18234                                  [Y, ko, D, l, qt]   \n",
       "18236  [ruta, fm, com, images, AS, Vies, i, cf, b, vc...   \n",
       "\n",
       "                                            text_stemmed  \\\n",
       "18231  [esxcc, com, js, index, htm, us, battl, net, n...   \n",
       "18232  [www, eira, nvinip, nch, wv, ydah, ye, u, rt, ...   \n",
       "18233  [www, institutocgr, coo, web, media, syqvem, d...   \n",
       "18234                                  [y, ko, d, l, qt]   \n",
       "18236  [ruta, fm, com, imag, as, vie, i, cf, b, vc, f...   \n",
       "\n",
       "                                               text_sent  \n",
       "18231  esxcc com js index htm us battl net noghn en r...  \n",
       "18232  www eira nvinip nch wv ydah ye u rt u g m i xz...  \n",
       "18233  www institutocgr coo web media syqvem dk ij r ...  \n",
       "18234                                        y ko d l qt  \n",
       "18236  ruta fm com imag as vie i cf b vc f d b g sd v...  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "good_sites.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c53e8ace",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_wordcloud(text, mask=None, max_words=400, max_font_size=120, figure_size=(24.0,16.0), \n",
    "                   title = None, title_size=40, image_color=False):\n",
    "    stopwords = set(STOPWORDS)\n",
    "    more_stopwords = {'com','http'}\n",
    "    stopwords = stopwords.union(more_stopwords)\n",
    "\n",
    "    wordcloud = WordCloud(background_color='white',\n",
    "                    stopwords = stopwords,\n",
    "                    max_words = max_words,\n",
    "                    max_font_size = max_font_size, \n",
    "                    random_state = 42,\n",
    "                    mask = mask)\n",
    "    wordcloud.generate(text)\n",
    "    \n",
    "    plt.figure(figsize=figure_size)\n",
    "    if image_color:\n",
    "        image_colors = ImageColorGenerator(mask);\n",
    "        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n",
    "        plt.title(title, fontdict={'size': title_size,  \n",
    "                                  'verticalalignment': 'bottom'})\n",
    "    else:\n",
    "        plt.imshow(wordcloud);\n",
    "        plt.title(title, fontdict={'size': title_size, 'color': 'green', \n",
    "                                  'verticalalignment': 'bottom'})\n",
    "    plt.axis('off');\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6d81e515",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1978a6ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "browser = webdriver.Firefox(\n",
    "    executable_path=r'C:\\geckodriver\\geckodriver.exe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9cfbbf99",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_urls = ['http:\\\\facebook.com'] \n",
    "links_with_text = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9b48a090",
   "metadata": {},
   "outputs": [],
   "source": [
    "for url in list_urls:\n",
    "    browser.get(url)\n",
    "    soup = BeautifulSoup(browser.page_source,\"html.parser\")\n",
    "    for line in soup.find_all('a'):\n",
    "        href = line.get('href')\n",
    "        links_with_text.append([url, href])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ecce2bed",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(links_with_text, columns=[\"from\", \"to\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f1ca204a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>from</th>\n",
       "      <th>to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>http:\\facebook.com</td>\n",
       "      <td>#</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>http:\\facebook.com</td>\n",
       "      <td>#</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>http:\\facebook.com</td>\n",
       "      <td>#</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>http:\\facebook.com</td>\n",
       "      <td>https://www.facebook.com/recover/initiate/?ars...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>http:\\facebook.com</td>\n",
       "      <td>#</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 from                                                 to\n",
       "0  http:\\facebook.com                                                  #\n",
       "1  http:\\facebook.com                                                  #\n",
       "2  http:\\facebook.com                                                  #\n",
       "3  http:\\facebook.com  https://www.facebook.com/recover/initiate/?ars...\n",
       "4  http:\\facebook.com                                                  #"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7f5879a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "cv = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5a6dd6dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature = cv.fit_transform(malicious_data.text_sent) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0204021e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 0]], dtype=int64)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature[:5].toarray() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e6290807",
   "metadata": {},
   "outputs": [],
   "source": [
    "trainX, testX, trainY, testY = train_test_split(feature, malicious_data.Label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "271f2af5",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9be88028",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Abhishek\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(trainX,trainY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b096234a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9637606762926233"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(testX,testY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5f8f4ab3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Scores_ml = {}\n",
    "Scores_ml['Logistic Regression'] = np.round(lr.score(testX,testY),2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c2be858e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy : 0.9780417418066111\n",
      "Testing Accuracy : 0.9637606762926233\n",
      "\n",
      "CLASSIFICATION REPORT\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.90      0.97      0.93     36590\n",
      "        Good       0.99      0.96      0.97    100747\n",
      "\n",
      "    accuracy                           0.96    137337\n",
      "   macro avg       0.95      0.96      0.95    137337\n",
      "weighted avg       0.97      0.96      0.96    137337\n",
      "\n",
      "\n",
      "CONFUSION MATRIX\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Training Accuracy :',lr.score(trainX,trainY))\n",
    "print('Testing Accuracy :',lr.score(testX,testY))\n",
    "con_mat = pd.DataFrame(confusion_matrix(lr.predict(testX), testY),\n",
    "            columns = ['Predicted:Bad', 'Predicted:Good'],\n",
    "            index = ['Actual:Bad', 'Actual:Good'])\n",
    "\n",
    "\n",
    "print('\\nCLASSIFICATION REPORT\\n')\n",
    "print(classification_report(lr.predict(testX), testY,\n",
    "                            target_names =['Bad','Good']))\n",
    "\n",
    "print('\\nCONFUSION MATRIX')\n",
    "plt.figure(figsize= (6,4))\n",
    "sns.heatmap(con_mat, annot = True,fmt='d',cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "69f63209",
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline_ls = make_pipeline(CountVectorizer(tokenizer = RegexpTokenizer(r'[A-Za-z]+').tokenize,stop_words='english'), LogisticRegression())\n",
    "##(r'\\b(?:http|ftp)s?://\\S*\\w|\\w+|[^\\w\\s]+') ([a-zA-Z]+)([0-9]+) -- these tolenizers giving me low accuray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7529560b",
   "metadata": {},
   "outputs": [],
   "source": [
    "trainX, testX, trainY, testY = train_test_split(malicious_data.URL, malicious_data.Label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9fd49759",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Abhishek\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('countvectorizer',\n",
       "                 CountVectorizer(stop_words='english',\n",
       "                                 tokenizer=<bound method RegexpTokenizer.tokenize of RegexpTokenizer(pattern='[A-Za-z]+', gaps=False, discard_empty=True, flags=re.UNICODE|re.MULTILINE|re.DOTALL)>)),\n",
       "                ('logisticregression', LogisticRegression())])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline_ls.fit(trainX,trainY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ffd04be5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy : 0.9795684074862442\n",
      "Testing Accuracy : 0.9668625352235741\n",
      "\n",
      "CLASSIFICATION REPORT\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         Bad       0.91      0.97      0.94     36806\n",
      "        Good       0.99      0.97      0.98    100531\n",
      "\n",
      "    accuracy                           0.97    137337\n",
      "   macro avg       0.95      0.97      0.96    137337\n",
      "weighted avg       0.97      0.97      0.97    137337\n",
      "\n",
      "\n",
      "CONFUSION MATRIX\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Training Accuracy :',pipeline_ls.score(trainX,trainY))\n",
    "print('Testing Accuracy :',pipeline_ls.score(testX,testY))\n",
    "con_mat = pd.DataFrame(confusion_matrix(pipeline_ls.predict(testX), testY),\n",
    "            columns = ['Predicted:Bad', 'Predicted:Good'],\n",
    "            index = ['Actual:Bad', 'Actual:Good'])\n",
    "\n",
    "\n",
    "print('\\nCLASSIFICATION REPORT\\n')\n",
    "print(classification_report(pipeline_ls.predict(testX), testY,\n",
    "                            target_names =['Bad','Good']))\n",
    "\n",
    "print('\\nCONFUSION MATRIX')\n",
    "plt.figure(figsize= (6,4))\n",
    "sns.heatmap(con_mat, annot = True,fmt='d',cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cf785aa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(pipeline_ls,open('malicious.pkl','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "076983fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9668625352235741\n"
     ]
    }
   ],
   "source": [
    "loaded_model = pickle.load(open('malicious.pkl', 'rb'))\n",
    "result = loaded_model.score(testX,testY)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9e80bb41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bad' 'good' 'bad' 'bad']\n",
      "******************************\n",
      "['good' 'good' 'good' 'good']\n"
     ]
    }
   ],
   "source": [
    "predict_bad = ['yeniik.com.tr/wp-admin/js/login.alibaba.com/login.jsp.php','facebook.com','tubemoviez.exe','svision-online.de/mgfi/administrator/components/com_babackup/classes/fx29id1.txt']\n",
    "predict_good = ['www.instagram.com','youtube.com/watch?v=qI0TQJI3vdU','retailhellunderground.com/','restorevisioncenters.com/html/technology.html']\n",
    "loaded_model = pickle.load(open('malicious.pkl', 'rb'))\n",
    "#predict_bad = vectorizers.transform(predict_bad)\n",
    "# predict_good = vectorizer.transform(predict_good)\n",
    "result = loaded_model.predict(predict_bad)\n",
    "result2 = loaded_model.predict(predict_good)\n",
    "print(result)\n",
    "print(\"*\"*30)\n",
    "print(result2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bcbb4852",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['good']\n"
     ]
    }
   ],
   "source": [
    "predict_bad = ['yahoo.com']\n",
    "loaded_model=pickle.load(open('malicious.pkl', 'rb'))\n",
    "resilt1=loaded_model.predict(predict_bad)\n",
    "print(resilt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cf0dc39a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bad']\n"
     ]
    }
   ],
   "source": [
    "predict_bad = ['nobell.it/70ffb52d079109dca5664cce6f317373782/...']\n",
    "loaded_model=pickle.load(open('malicious.pkl', 'rb'))\n",
    "resilt1=loaded_model.predict(predict_bad)\n",
    "print(resilt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "73b6e976",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['good']\n"
     ]
    }
   ],
   "source": [
    "predict_bad = ['www.sjbit.edu']\n",
    "loaded_model=pickle.load(open('malicious.pkl', 'rb'))\n",
    "resilt1=loaded_model.predict(predict_bad)\n",
    "print(resilt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aef42439",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
